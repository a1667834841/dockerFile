name: Build Docker Images

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX=$(cat .github/docker-images.json | jq -c '{include: .images}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Read image config
        id: read_config
        run: echo "config=$(cat .github/docker-images.json | jq -c)" >> $GITHUB_OUTPUT
        
      - name: Build and upload images
        run: |
          images='${{ steps.read_config.outputs.config }}'
          
          # 打印当前矩阵变量，用于调试
          echo "Current matrix: name=${{ matrix.name }}, tag=${{ matrix.tag }}"
          
          # 只构建当前矩阵指定的镜像
          echo "Building ${{ matrix.name }}:${{ matrix.tag }}"
          
          # 查找对应的 dockerfile
          for img in $(echo "$images" | jq -c '.images[]'); do
            name=$(echo $img | jq -r '.name')
            tag=$(echo $img | jq -r '.tag')
            
            if [ "$name" == "${{ matrix.name }}" ] && [ "$tag" == "${{ matrix.tag }}" ]; then
              dockerfile=$(echo $img | jq -r '.dockerfile')
              echo "Found dockerfile: $dockerfile for $name:$tag"
              
              # Build image
              docker build -t $name:$tag -f $dockerfile .
              
              # Save image
              echo "Saving image to /tmp/${name}_${tag}.tar"
              docker save $name:$tag -o /tmp/${name}_${tag}.tar
              
              # 验证文件是否存在
              ls -la /tmp/
              if [ -f "/tmp/${name}_${tag}.tar" ]; then
                echo "File exists: /tmp/${name}_${tag}.tar"
                echo "File size: $(du -h /tmp/${name}_${tag}.tar | cut -f1)"
              else
                echo "ERROR: File not found: /tmp/${name}_${tag}.tar"
              fi
              
              break
            fi
          done
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}_${{ matrix.tag }}
          path: /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          if-no-files-found: error  # 如果找不到文件则报错
          retention-days: 1 