name: Build Docker Images

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX=$(cat .github/docker-images.json | jq -c '{include: .images}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Read image config
        id: read_config
        run: echo "config=$(cat .github/docker-images.json | jq -c)" >> $GITHUB_OUTPUT
        
      - name: Build and upload images
        run: |
          images='${{ steps.read_config.outputs.config }}'
          
          # 打印当前矩阵变量，用于调试
          echo "Current matrix: name=${{ matrix.name }}, tag=${{ matrix.tag }}"
          
          # 只构建当前矩阵指定的镜像
          echo "Building ${{ matrix.name }}:${{ matrix.tag }}"
          
          # 直接查询对应的 dockerfile
          dockerfile=$(echo "$images" | jq -r --arg name "${{ matrix.name }}" --arg tag "${{ matrix.tag }}" '.images[] | select(.name == $name and .tag == $tag) | .dockerfile')
          echo "Found dockerfile: $dockerfile for ${{ matrix.name }}:${{ matrix.tag }}"
          
          # Build image
          docker build -t ${{ matrix.name }}:${{ matrix.tag }} -f ${{ matrix.dockerfile }} .
          
          # Save image
          echo "Saving image to /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar"
          docker save ${{ matrix.name }}:${{ matrix.tag }} -o /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          
          # 验证文件是否存在
          ls -la /tmp/
          if [ -f "/tmp/${{ matrix.name }}_${{ matrix.tag }}.tar" ]; then
            echo "File exists: /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar"
            echo "File size: $(du -h /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar | cut -f1)"
          else
            echo "ERROR: File not found: /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar"
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}_${{ matrix.tag }}
          path: /tmp/${{ matrix.name }}_${{ matrix.tag }}.tar
          if-no-files-found: error  # 如果找不到文件则报错
          retention-days: 1 